@startuml
skin rose
hide empty method
left to right direction
set separator none
allow_mixing
hide empty members

package io.ebean <<external>> {
    class Database {
    }
}

package io.javalin <<external>> {
    class Javalin {
    }
}

package cl.ucn.disc.dsm.pictwin {

    package model {

        class BaseModel <<abstract>> {
            # id: Long
            # ulid: String
            # version: Long
            # createdAt: Instant
            # modifiedAt: Instant
            # deleted: Boolean
        }

        class Persona <<entity>> {
            - email: String
            - password: String
            - strikes: Integer
            - blocked: Boolean
            - blockedAt: Instant
        }
        Persona --|> BaseModel

        class Pic <<entity>>{
            - latitude: Double
            - longitude: Double
            - reports: Integer
            - date: Instant
            - photo: byte[]
            - bloqued: Boolean
            - views: Integer
        }
        Pic --|> BaseModel
        Pic --> "1" Persona: - persona
        Pic "* " <-- Persona: - pics: List<Pic>

        class PicTwin <<entity>> {
            - expiration: Instant
            - expired: Boolean
            - reported: Boolean
        }
        PicTwin --|> BaseModel
        PicTwin --> "1" Persona: - persona
        PicTwin --> "1" Pic: - pic
        PicTwin --> "1" Pic: - twin
        PicTwin "*" <-- Persona: - picTwins: List<PicTwin>

    }

    package services {

        class Controller {
            + Controller(database: Database)
            + seed(): Boolean
            + register(email: String, password: String): Persona
            + login(email: String, password: String): Persona
            + addPic(ulid: String, latitude: Double, longitude: Double, picture: File): PicTwin
            + getPicTwins(ulid: String): List<PicTwin>
        }
        Controller --> "1" Database:  - database
        Controller ..> Persona: <<uses>>
        Controller ..> Pic: <<uses>>
        Controller ..> PicTwin: <<uses>>
    }

    class TheMain <<entrypoint>> {
        + {static} main(args: String[]): void
    }
    TheMain .> Controller: <<uses>>

    enum Method {
        GET
        POST
        PUT
    }

    abstract class Route {
        # path: String
        # handler: Handler
        + Route(method: Method, path: String, handler: Handler)
        + getMethod(): Method
        + getPath(): String
        + getHandler(): Handler
    }
    Route -> Method: - method

    class TheServer <<entrypoint>>{
        - createJavalin(): Javalin
        - addRoute(route: Route, javalin: Javalin): void
        + {static} main(args: String[]): void
    }
    TheServer .> Controller: <<uses>>
    TheServer .> Route: <<uses>>
    TheServer .> Javalin: <<uses>>

}

@enduml